// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  firstName     String?
  lastName      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  shops         Shop[]
}

model Shop {
  id              String                @id @default(cuid())
  shopifyDomain   String                @unique
  name            String
  domain          String
  accessToken     String
  userId          String
  user            User                  @relation(fields: [userId], references: [id])
  fiscalConfig    FiscalConfiguration?
  reports         Report[]
  generalSettings GeneralSettings?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  scheduledTasks  ScheduledTask[]
  tasks           Task[]

  @@index([userId])
}

model FiscalConfiguration {
  id                String   @id @default(cuid())
  shopId           String   @unique
  code             String   // OHADA, SYSCOHADA, etc.
  name             String
  description      String
  countries        String[]
  currency         String
  fileFormat       String
  encoding         String
  separator        String
  requiredColumns  String[] // Array of required columns
  taxRates         Json     // JSON object for tax rates
  compatibleSoftware String[] // Array of compatible software
  exportFormats    String[] // Array of export formats
  notes            String
  companyName      String?
  country          String?
  vatRate          Float?
  defaultFormat    ExportFormat?
  salesAccount     String   @default("701")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  shop             Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
}

enum ReportStatus {
  PENDING
  PROCESSING
  COMPLETED
  ERROR
}

model Report {
  id            String   @id @default(cuid())
  type          String   // manual, scheduled
  dataType      String   // orders, customers, refunds, taxes
  status        ReportStatus
  format        ExportFormat
  startDate     DateTime
  endDate       DateTime
  shopId        String
  fileSize      Int
  fileName      String
  filePath      String?
  errorMessage  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  shop          Shop          @relation(fields: [shopId], references: [id])
  scheduledTasks ScheduledTask[]
  tasks         Task[]

  @@index([shopId])
}

enum UserRole {
  ADMIN
  USER
  ACCOUNTANT
}

enum ExportFormat {
  CSV
  JSON
  PDF
  XML
  TXT
  XLSX
}

model ScheduledTask {
  id            String   @id @default(cuid())
  reportId      String
  shopId        String
  frequency     String   // daily, monthly, yearly
  executionDay  Int      // Day of month for monthly/yearly tasks
  executionTime String   // HH:mm format
  emailConfig   String   // JSON string containing email configuration
  lastRun       DateTime?
  nextRun       DateTime
  status        String   // ACTIVE, PAUSED, COMPLETED
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  report        Report   @relation(fields: [reportId], references: [id])
  shop          Shop     @relation(fields: [shopId], references: [id])
  tasks         Task[]

  @@index([shopId])
  @@index([reportId])
}

model Task {
  id              String   @id @default(cuid())
  scheduledTaskId String
  shopId          String
  reportId        String
  status          String   // PENDING, PROCESSING, COMPLETED, FAILED
  scheduledFor    DateTime
  startedAt       DateTime?
  completedAt     DateTime?
  emailConfig     String   // JSON string containing email configuration
  errorMessage    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  scheduledTask   ScheduledTask @relation(fields: [scheduledTaskId], references: [id])
  shop            Shop          @relation(fields: [shopId], references: [id])
  report          Report        @relation(fields: [reportId], references: [id])

  @@index([scheduledTaskId])
  @@index([shopId])
  @@index([reportId])
}

model GeneralSettings {
  id           String   @id @default(cuid())
  shopId       String   @unique
  timezone     String   @default("UTC")
  language     String   @default("fr")
  salesAccount String   @default("701")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  shop         Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
}
